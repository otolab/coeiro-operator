audio-player.ts:
  analysis:
    meta:
      model: vertexai:gemini-2.5-pro
      sources:
        - path: audio-player.ts
          hash: 7a2edc80f410b4e8150dc7671f5579d794ca2bf0f700516c85f06187fc4f62a1
      version: 0.0.3
    result:
      content: >-
        # Analysis Report for `src/say/audio-player.ts`


        This report details the analysis of the source file
        `src/say/audio-player.ts`, which is responsible for managing audio
        playback. The analysis was conducted based on the entire code provided
        in the input chunks.


        ## 1. Dependency details


        The file's dependencies on external and internal modules are as follows.


        **Analysis:**

        The dependencies are identified from the `import` statements at the
        beginning of the file.


        **Results:**

        ```yaml

        child_process:
          - spawn
          - ChildProcess
        fs/promises:
          - writeFile
          - unlink
        ./types.js:
          - type AudioResult
          - type Chunk
        ```


        ## 2. Dynamic import determined at run-time


        **Analysis:**

        The code was scanned for dynamic imports where the module path is
        determined by a variable (e.g., `require(variable)` or
        `import(variable)`). No such patterns were found in the file. The
        `spawn` function is used to execute system commands, but this is process
        execution, not module importing.


        **Results:**

        No variable-based dynamic imports were found in this file.


        ## 3. Global variables / constants


        **Analysis:**

        The code was examined for the use of non-standard global variables or
        constants. All identified global objects (`console`, `Date`, `Buffer`,
        `setTimeout`, `DataView`, `Uint8Array`, `Promise`, `Error`) are standard
        in the Node.js environment.


        **Results:**

        No dependencies on non-standard global variables or constants were
        found.


        ## 4. Prototype Pollution


        **Analysis:**

        A best-effort search was conducted for potential prototype pollution,
        such as modifying prototypes of native objects or using non-standard
        methods on them. No such suspicious code was detected.


        **Results:**

        No potential signs of prototype pollution were detected.


        ## 5. Module interface


        **Analysis:**

        The file exports a single class, `AudioPlayer`, which serves as the
        public interface for this module. The public methods of this class
        constitute the module's API.


        **Results:**

        ```

        details:
          - value: export class AudioPlayer { public async initialize(): Promise<boolean>; public async playAudioFile(audioFile: string): Promise<void>; public async playAudioStream(audioResult: AudioResult): Promise<void>; public detectAudioPlayerSync(): string; public async saveAudio(audioBuffer: ArrayBuffer, outputFile: string): Promise<void>; public extractPCMFromWAV(wavBuffer: ArrayBuffer): Uint8Array; public applyCrossfade(pcmData: Uint8Array, overlapSamples: number): Uint8Array; }
        ```
      usage: 531
  summary:
    meta:
      model: vertexai:gemini-2.5-pro
      sources:
        - path: audio-player.ts
          hash: 7a2edc80f410b4e8150dc7671f5579d794ca2bf0f700516c85f06187fc4f62a1
      version: 0.0.3
    result:
      results:
        - hasFindings: true
          name: Dependency details
          details:
            - value: child_process
              subItems:
                - spawn
                - ChildProcess
            - value: fs/promises
              subItems:
                - writeFile
                - unlink
            - value: ./types.js
              subItems:
                - type AudioResult
                - type Chunk
        - hasFindings: false
          name: Dynamic import determined at run-time
        - hasFindings: false
          name: Global variables / constants
        - hasFindings: false
          name: Prototype Pollution
        - hasFindings: true
          name: Module interface
          details:
            - value: "export class AudioPlayer { public async initialize(): Promise<boolean>;
                public async playAudioFile(audioFile: string): Promise<void>;
                public async playAudioStream(audioResult: AudioResult):
                Promise<void>; public detectAudioPlayerSync(): string; public
                async saveAudio(audioBuffer: ArrayBuffer, outputFile: string):
                Promise<void>; public extractPCMFromWAV(wavBuffer: ArrayBuffer):
                Uint8Array; public applyCrossfade(pcmData: Uint8Array,
                overlapSamples: number): Uint8Array; }"
audio-synthesizer.ts:
  analysis:
    meta:
      model: vertexai:gemini-2.5-pro
      sources:
        - path: audio-synthesizer.ts
          hash: 95407dada899f15c4a276ff7c0c94f6c8a62057ee7ca1e86a01e491e6cafa8bd
      version: 0.0.3
    result:
      content: >-
        # Analysis Report for src/say/audio-synthesizer.ts


        This report details the analysis of the `src/say/audio-synthesizer.ts`
        file, which is responsible for synthesizing audio from text using the
        COEIROINK API. It handles server communication, voice listing, text
        chunking, and both streaming and non-streaming audio synthesis.


        This file was processed in its entirety as all chunks were provided.


        ## 1. Dependency details


        The module's dependencies are analyzed based on its import statements.


        - **Source**: `import type { Config, StreamConfig, Chunk, AudioResult,
        OperatorVoice } from './types.js';`


        The analysis results are as follows:


        ```yaml

        ./types.js:
          - type Config
          - type StreamConfig
          - type Chunk
          - type AudioResult
          - type OperatorVoice
        ```


        **Reasoning**: The file imports several type definitions from a local
        module `./types.js`. These types are used to define the structure of
        configuration objects, data chunks, and API results within the
        `AudioSynthesizer` class.


        ## 2. Dynamic import determined at run-time


        There are no dynamic imports in this file where the module path is
        determined by a variable at run-time.


        **Reasoning**: The code does not contain any `require()` or `import()`
        expressions with variable-based paths. All dependencies are statically
        declared.


        ## 3. Global variables / constants


        No non-standard global variables or constants are used in this file.


        **Reasoning**: The code utilizes standard global objects and functions
        available in the Node.js environment, such as `fetch`, `AbortSignal`,
        `console`, `Math`, `Date`, `Error`, `Object`, and `JSON`. There is no
        reliance on externally defined, non-standard global variables. The
        `STREAM_CONFIG` constant is defined locally within the module scope.


        ## 4. Prototype Pollution


        No potential prototype pollution was detected.


        **Reasoning**: The code uses standard built-in methods on native objects
        (e.g., `Array.prototype.forEach`, `String.prototype.slice`). There are
        no instances of modifying prototypes of native objects or using
        non-standard methods that would suggest prototype pollution. This
        analysis is based on a best-effort search.


        ## 5. Module interface


        The module exports the `AudioSynthesizer` class, which provides the core
        functionality for audio synthesis.


        - **Source**: `export class AudioSynthesizer { ... }`


        The public interface of this module is as follows:


        ```

        details:
          - value: export class AudioSynthesizer { constructor(config: Config); checkServerConnection(): Promise<boolean>; listVoices(): Promise<void>; splitTextIntoChunks(text: string): Chunk[]; synthesizeChunk(chunk: Chunk, voiceInfo: string | OperatorVoice, speed: number): Promise<AudioResult>; convertRateToSpeed(rate: number): number; synthesizeStream(text: string, voiceId: string | OperatorVoice, speed: number): AsyncGenerator<AudioResult>; synthesize(text: string, voiceId: string | OperatorVoice, speed: number): Promise<AudioResult>; }
        ```


        **Reasoning**: The `AudioSynthesizer` class is the sole export from this
        module. Its public methods, such as `checkServerConnection`,
        `synthesizeStream`, and `synthesize`, form the API for interacting with
        the audio synthesis functionality. The constructor requires a `Config`
        object for initialization.
      usage: 695
  summary:
    meta:
      model: vertexai:gemini-2.5-pro
      sources:
        - path: audio-synthesizer.ts
          hash: 95407dada899f15c4a276ff7c0c94f6c8a62057ee7ca1e86a01e491e6cafa8bd
      version: 0.0.3
    result:
      results:
        - hasFindings: true
          name: Dependency details
          details:
            - value: ./types.js
              reason: The file imports several type definitions from a local module
                `./types.js`. These types are used to define the structure of
                configuration objects, data chunks, and API results within the
                `AudioSynthesizer` class.
              subItems:
                - type Config
                - type StreamConfig
                - type Chunk
                - type AudioResult
                - type OperatorVoice
        - hasFindings: false
          name: Dynamic import determined at run-time
        - hasFindings: false
          name: Global variables / constants
        - hasFindings: false
          name: Prototype Pollution
        - hasFindings: true
          name: Module interface
          details:
            - value: "export class AudioSynthesizer { constructor(config: Config);
                checkServerConnection(): Promise<boolean>; listVoices():
                Promise<void>; splitTextIntoChunks(text: string): Chunk[];
                synthesizeChunk(chunk: Chunk, voiceInfo: string | OperatorVoice,
                speed: number): Promise<AudioResult>; convertRateToSpeed(rate:
                number): number; synthesizeStream(text: string, voiceId: string
                | OperatorVoice, speed: number): AsyncGenerator<AudioResult>;
                synthesize(text: string, voiceId: string | OperatorVoice, speed:
                number): Promise<AudioResult>; }"
              reason: The `AudioSynthesizer` class is the sole export from this module. Its
                public methods, such as `checkServerConnection`,
                `synthesizeStream`, and `synthesize`, form the API for
                interacting with the audio synthesis functionality. The
                constructor requires a `Config` object for initialization.
cli.ts:
  analysis:
    meta:
      model: vertexai:gemini-2.5-pro
      sources:
        - path: cli.ts
          hash: 3d992ab9f58d052a8b409aa7fc91a0bea3f1da173003b7adb134d07d9a316205
      version: 0.0.3
    result:
      content: >-
        # Analysis Report for `src/say/cli.ts`


        This report details the analysis of the `src/say/cli.ts` file, which
        implements the command-line interface for the `say-coeiroink` tool.


        ## 1. Dependency details


        The file has the following dependencies on external modules:


        ```yaml

        fs/promises:
          - readFile
          - access
        fs:
          - constants
        ./index.js:
          - SayCoeiroink
          - loadConfig
        ```


        **Reasoning:**

        The analysis is based on the `import` statements at the beginning of the
        file:

        - `import { readFile, access } from 'fs/promises';`

        - `import { constants } from 'fs';`

        - `import { SayCoeiroink, loadConfig } from './index.js';`


        ## 2. Dynamic import determined at run-time


        No dynamically determined imports were found in this file.


        **Reasoning:**

        The code does not contain any `require()` or `import()` statements with
        variable-based paths (e.g., `require(\`plugins/${pluginName}\`)`). All
        module imports are static.


        ## 3. Global variables / constants


        The module relies on the following non-standard global variables:


        ```

        * process.env

        ```


        **Reasoning:**

        The code accesses `process.env.COEIROINK_VOICE` in the `parseArguments`
        method to get a default voice setting from environment variables. While
        `process` is a standard Node.js global, `process.env` represents a
        dependency on the execution environment's state. Other globals used like
        `process.stdin`, `process.argv`, `console`, and `Buffer` are standard in
        a Node.js environment and are not listed.


        ```typescript

        // src/say/cli.ts

        const options: ParsedOptions = {
            voice: process.env.COEIROINK_VOICE || '',
            // ...
        };

        ```


        ## 4. Prototype Pollution


        No potential prototype pollution was detected.


        **Reasoning:**

        A review of the code did not find any instances where native object
        prototypes (like `Object.prototype` or `Array.prototype`) were modified.


        ## 5. Module interface


        The module exports a single class, `SayCoeiroinkCLI`, as its default
        export.


        ```

        details:
          - value: default class SayCoeiroinkCLI { constructor(sayCoeiroink: SayCoeiroink); async showUsage(): Promise<void>; async run(args: string[]): Promise<void>; }
        ```


        **Reasoning:**

        The export is defined by the statement `export default SayCoeiroinkCLI;`
        at the end of the file. The interface includes the public constructor
        and methods (`showUsage`, `run`). Private methods (`parseArguments`,
        `getInputText`) are not part of the public interface. The
        `ParsedOptions` interface and the `main` function are not exported.
      usage: 591
  summary:
    meta:
      model: vertexai:gemini-2.5-pro
      sources:
        - path: cli.ts
          hash: 3d992ab9f58d052a8b409aa7fc91a0bea3f1da173003b7adb134d07d9a316205
      version: 0.0.3
    result:
      results:
        - hasFindings: true
          name: Dependency details
          details:
            - value: fs/promises
              subItems:
                - readFile
                - access
            - value: fs
              subItems:
                - constants
            - value: ./index.js
              subItems:
                - SayCoeiroink
                - loadConfig
        - hasFindings: false
          name: Dynamic import determined at run-time
        - hasFindings: true
          name: Global variables / constants
          details:
            - value: process.env
              reason: The code accesses `process.env.COEIROINK_VOICE` in the `parseArguments`
                method to get a default voice setting from environment
                variables. While `process` is a standard Node.js global,
                `process.env` represents a dependency on the execution
                environment's state. Other globals used like `process.stdin`,
                `process.argv`, `console`, and `Buffer` are standard in a
                Node.js environment and are not listed.
        - hasFindings: false
          name: Prototype Pollution
        - hasFindings: true
          name: Module interface
          details:
            - value: "default class SayCoeiroinkCLI { constructor(sayCoeiroink: SayCoeiroink);
                async showUsage(): Promise<void>; async run(args: string[]):
                Promise<void>; }"
              reason: The export is defined by the statement `export default SayCoeiroinkCLI;`
                at the end of the file. The interface includes the public
                constructor and methods (`showUsage`, `run`). Private methods
                (`parseArguments`, `getInputText`) are not part of the public
                interface. The `ParsedOptions` interface and the `main` function
                are not exported.
index.ts:
  analysis:
    meta:
      model: vertexai:gemini-2.5-pro
      sources:
        - path: index.ts
          hash: e82520c803380902ac9554cba347711da604bde8741c750a5aa673b864af2811
      version: 0.0.3
    result:
      content: >-
        # Analysis Report for src/say/index.ts


        This report provides a detailed analysis of the `src/say/index.ts` file,
        which appears to be a module for handling speech synthesis using
        COEIROINK.


        ## 1. Dependency Details


        The module has the following dependencies, identified from its `import`
        statements:


        - **fs/promises**:
          - `readFile`: Used for asynchronously reading file contents.
          - `access`: Used to check file existence.
          - `mkdir`: Used for creating directories.
        - **fs**:
          - `constants`: Used with `access` to specify the check mode (e.g., `F_OK` for existence).
        - **path**:
          - `join`: Used for combining path segments.
        - **module**:
          - `createRequire`: Used to create a `require` function within an ES module environment.
        - **../operator/index.js**:
          - `OperatorManager`: A class likely responsible for managing COEIROINK operators (voices/characters).
        - **./speech-queue.js**:
          - `SpeechQueue`: A class for managing a queue of speech synthesis tasks.
        - **./audio-player.js**:
          - `AudioPlayer`: A class for handling audio playback.
        - **./audio-synthesizer.js**:
          - `AudioSynthesizer`: A class for handling the core audio synthesis process.
        - **./types.js**:
          - `type Config`: Type definition for the main configuration.
          - `type StreamConfig`: Type definition for streaming-related configuration.
          - `type Chunk`: Type definition for a text chunk.
          - `type AudioResult`: Type definition for the result of audio synthesis.
          - `type OperatorVoice`: Type definition for operator voice information.
          - `type SpeechTask`: Type definition for a task in the speech queue.
          - `type SynthesizeOptions`: Type definition for synthesis options.
          - `type SynthesizeResult`: Type definition for the result of a synthesis request.

        **Analysis Rationale:**

        The dependencies are directly extracted from the `import` statements at
        the top of the file. These statements explicitly declare the external
        modules and internal components that `src/say/index.ts` relies on to
        function.


        ## 2. Dynamic Import Determined at Run-time


        No dynamically determined imports were found in this file.


        **Analysis Rationale:**

        The code was scanned for `import()` or `require()` calls that use
        variables or expressions to determine the module path at runtime. While
        `const require = createRequire(import.meta.url);` is present to enable
        CommonJS-style imports, it is not used within this file to dynamically
        load modules. All dependencies are statically declared.


        ## 3. Global Variables / Constants


        The file utilizes several standard global objects provided by the
        Node.js runtime environment, but no non-standard global variables or
        constants were identified.


        - `process.env.HOME`: To determine the user's home directory.

        - `process.env.USERPROFILE`: A fallback for the home directory on
        Windows.

        - `process.cwd()`: To get the current working directory as a fallback
        for the configuration path.

        - `console`: Used for logging errors (`.error`), warnings (`.warn`), and
        debug messages (`.log`).

        - `JSON.parse`: To parse the configuration file.

        - `Error`: To create error objects.

        - `Object.entries`: To iterate over object key-value pairs.

        - `Uint8Array`, `ArrayBuffer`: For handling binary audio data.


        **Analysis Rationale:**

        The analysis focused on identifying variables used without a local
        definition or an explicit import. All such identified variables are part
        of the standard library of the execution environment (Node.js) and are
        not considered external dependencies in the context of this analysis.


        ## 4. Prototype Pollution


        No potential instances of prototype pollution were detected.


        **Analysis Rationale:**

        The code was reviewed on a best-effort basis for patterns that could
        lead to prototype pollution, such as unsafe recursive object merging or
        direct modification of built-in object prototypes (e.g.,
        `Object.prototype`). The object spreading (`{ ...DEFAULT_CONFIG,
        ...config }`) is used safely to merge configuration objects and does not
        pose a risk.


        ## 5. Module Interface


        The module exports a function for loading configuration and a class that
        encapsulates the speech synthesis functionality.


        - `export async function loadConfig(configFile: string | null = null):
        Promise<Config>`

        - `export class SayCoeiroink {`
          - `  constructor(config: Config | null = null)`
          - `  async initialize(): Promise<void>`
          - `  async buildDynamicConfig(): Promise<void>`
          - `  async initializeAudioPlayer(): Promise<boolean>`
          - `  splitTextIntoChunks(text: string): Chunk[]`
          - `  async getCurrentOperatorVoice(): Promise<OperatorVoice | null>`
          - `  async synthesizeChunk(chunk: Chunk, voiceInfo: string | OperatorVoice, speed: number): Promise<AudioResult>`
          - `  extractPCMFromWAV(wavBuffer: ArrayBuffer): Uint8Array`
          - `  async playAudioStream(audioResult: AudioResult): Promise<void>`
          - `  async playAudioFile(audioFile: string): Promise<void>`
          - `  detectAudioPlayerSync(): string`
          - `  applyCrossfade(pcmData: Uint8Array, overlapSamples: number): Uint8Array`
          - `  convertRateToSpeed(rate: number): number`
          - `  async streamSynthesizeAndPlay(text: string, voiceId: string | OperatorVoice, speed: number): Promise<void>`
          - `  async listVoices(): Promise<void>`
          - `  async saveAudio(audioBuffer: ArrayBuffer, outputFile: string): Promise<void>`
          - `  async checkServerConnection(): Promise<boolean>`
          - `  async enqueueSpeech(text: string, options?: SynthesizeOptions): Promise<SynthesizeResult>`
          - `  getSpeechQueueStatus(): any`
          - `  clearSpeechQueue(): void`
          - `  async synthesizeText(text: string, options?: SynthesizeOptions): Promise<SynthesizeResult>`
          - `  async synthesizeTextAsync(text: string, options?: SynthesizeOptions): Promise<SynthesizeResult>`
        - `}`

        - `export default SayCoeiroink`


        **Analysis Rationale:**

        The public interface was determined by identifying all `export` and
        `export default` statements in the file. The `SayCoeiroink` class is the
        primary export, providing a comprehensive set of methods for
        configuration, synthesis, playback, and queue management. The
        `loadConfig` function is also exported as a standalone utility.
      usage: 1369
  errors:
    meta:
      model: vertexai:gemini-2.5-pro
      sources:
        - path: index.ts
          hash: 9a26b7ef506a6e0d2d47ce230e115b1a11b0514990f10b00cf78722722d7f62d
      version: 0.0.0
    result:
      - "Module interface: The methods of the `SayCoeiroink` class are all
        combined into a single, long string. This format is extremely difficult
        to read and differs from the example in the analysis guide, which lists
        each exported member as a separate item in the details list."
  summary:
    meta:
      model: vertexai:gemini-2.5-pro
      sources:
        - path: index.ts
          hash: 2e201604819c152a64d1fa1ab17bf3e4368551da61c5d3ec1c8afe9220c8f915
      version: 0.0.3
    result:
      results:
        - hasFindings: true
          name: Dependency details
          details:
            - value: fs/promises
              subItems:
                - readFile
                - access
                - mkdir
            - value: fs
              subItems:
                - constants
            - value: path
              subItems:
                - join
            - value: module
              subItems:
                - createRequire
            - value: ../operator/index.js
              subItems:
                - OperatorManager
            - value: ./speech-queue.js
              subItems:
                - SpeechQueue
            - value: ./audio-player.js
              subItems:
                - AudioPlayer
            - value: ./audio-synthesizer.js
              subItems:
                - AudioSynthesizer
            - value: ./types.js
              subItems:
                - type Config
                - type StreamConfig
                - type Chunk
                - type AudioResult
                - type OperatorVoice
                - type SpeechTask
                - type SynthesizeOptions
                - type SynthesizeResult
        - hasFindings: false
          name: Dynamic import determined at run-time
          details: []
        - hasFindings: false
          name: Global variables / constants
          details: []
        - hasFindings: false
          name: Prototype Pollution
          details: []
        - hasFindings: true
          name: Module interface
          details:
            - value: "export async function loadConfig(configFile: string | null = null):
                Promise<Config>"
            - value: export class SayCoeiroink
            - value: export default SayCoeiroink
speech-queue.ts:
  analysis:
    meta:
      model: vertexai:gemini-2.5-pro
      sources:
        - path: speech-queue.ts
          hash: 7e2075a45628d42ef1fcb0a54299bbf0be8e9c12b65ad6c942b6df20148e505c
      version: 0.0.3
    result:
      content: >-
        承知いたしました。`src/say/speech-queue.ts` の分析を開始します。

        以下に分析結果を報告します。


        ---


        ### `src/say/speech-queue.ts` の分析レポート


        このファイルは、音声合成タスクを管理するためのキューを実装しています。タスクをキューに追加し、一つずつ順次処理する機能を提供します。


        ---


        #### 1. Dependency details


        このファイルは、型定義のために以下のモジュールに依存しています。


        ```yaml

        ./types.js:
          - type SpeechTask
          - type SynthesizeOptions
          - type SynthesizeResult
        ```


        **根拠:**

        以下の `import` 文に基づきます。

        ```typescript

        import type { SpeechTask, SynthesizeOptions, SynthesizeResult } from
        './types.js';

        ```


        ---


        #### 2. Dynamic import determined at run-time


        このファイルには、実行時に解決される動的なインポートは含まれていません。


        ---


        #### 3. Global variables / constants


        このファイルでは、標準で提供されているグローバルオブジェクト（`Date`, `console`,
        `Error`）のみが使用されており、非標準のグローバル変数や定数への依存はありません。


        ---


        #### 4. Prototype Pollution


        分析した範囲では、ネイティブオブジェクトのプロトタイプを汚染する可能性のあるコードは検出されませんでした。


        ---


        #### 5. Module interface


        このモジュールは、`SpeechQueue` クラスを外部に公開しています。


        ```

        details:
          - value: export class SpeechQueue { constructor(processCallback: (task: SpeechTask) => Promise<void>); async enqueue(text: string, options?: SynthesizeOptions): Promise<SynthesizeResult>; getStatus(): { queueLength: number; isProcessing: boolean; nextTaskId: number | null; }; clear(): void; }
        ```


        **根拠:**

        `SpeechQueue` クラスが `export` キーワード付きで宣言されており、その public
        なメソッドとコンストラクタが外部インターフェイスとなります。

        ```typescript

        export class SpeechQueue {
            constructor(private processCallback: (task: SpeechTask) => Promise<void>) {}

            async enqueue(text: string, options: SynthesizeOptions = {}): Promise<SynthesizeResult> {
                // ...
            }

            getStatus() {
                // ...
            }

            clear(): void {
                // ...
            }
        }

        ```
      usage: 674
  summary:
    meta:
      model: vertexai:gemini-2.5-pro
      sources:
        - path: speech-queue.ts
          hash: 7e2075a45628d42ef1fcb0a54299bbf0be8e9c12b65ad6c942b6df20148e505c
      version: 0.0.3
    result:
      results:
        - hasFindings: true
          name: Dependency details
          details:
            - value: ./types.js
              reason: >-
                以下の `import` 文に基づきます。

                ```typescript

                import type { SpeechTask, SynthesizeOptions, SynthesizeResult }
                from './types.js';

                ```
              subItems:
                - type SpeechTask
                - type SynthesizeOptions
                - type SynthesizeResult
        - hasFindings: false
          name: Dynamic import determined at run-time
        - hasFindings: false
          name: Global variables / constants
        - hasFindings: false
          name: Prototype Pollution
        - hasFindings: true
          name: Module interface
          details:
            - value: "export class SpeechQueue { constructor(processCallback: (task:
                SpeechTask) => Promise<void>); async enqueue(text: string,
                options?: SynthesizeOptions): Promise<SynthesizeResult>;
                getStatus(): { queueLength: number; isProcessing: boolean;
                nextTaskId: number | null; }; clear(): void; }"
              reason: "`SpeechQueue` クラスが `export` キーワード付きで宣言されており、その public
                なメソッドとコンストラクタが外部インターフェイスとなります。"
types.ts:
  analysis:
    meta:
      model: vertexai:gemini-2.5-pro
      sources:
        - path: types.ts
          hash: 50262a9b7d2db5099c6d5a5bf0e68638530cc1e4b977ae614cebc307c5221383
      version: 0.0.3
    result:
      content: |-
        はい、承知いたしました。`src/say/types.ts`の分析を開始します。

        ---

        ### `src/say/types.ts`の分析レポート

        このファイルは、音声合成システムに関連するTypeScriptの型定義のみを含んでいます。

        ### 1. Dependency details

        このファイルには外部モジュールや他のファイルからのインポート文が存在しないため、依存関係はありません。

        ### 2. Dynamic import determined at run-time

        変数を伴う動的なインポート（例: `require(variable)`）は、このファイル内には存在しません。

        ### 3. Global variables / constants

        このファイルでは、実行環境から提供される標準的なグローバル変数・定数以外の利用はありません。

        ### 4. Prototype Pollution

        ネイティブオブジェクトのプロトタイプを汚染するようなコードは、このファイル内には見つかりませんでした。

        ### 5. Module interface

        このモジュールは、以下のインターフェースを外部に公開しています。

        ```typescript
        details:
          - value: export interface Config
          - value: export interface StreamConfig
          - value: export interface Chunk
          - value: export interface AudioResult
          - value: export interface OperatorVoice
          - value: export interface SpeechTask
          - value: export interface SynthesizeOptions
          - value: export interface SynthesizeResult
        ```
      usage: 403
  summary:
    meta:
      model: vertexai:gemini-2.5-pro
      sources:
        - path: types.ts
          hash: 50262a9b7d2db5099c6d5a5bf0e68638530cc1e4b977ae614cebc307c5221383
      version: 0.0.3
    result:
      results:
        - hasFindings: false
          name: Dependency details
        - hasFindings: false
          name: Dynamic import determined at run-time
        - hasFindings: false
          name: Global variables / constants
        - hasFindings: false
          name: Prototype Pollution
        - hasFindings: true
          name: Module interface
          details:
            - value: export interface Config
            - value: export interface StreamConfig
            - value: export interface Chunk
            - value: export interface AudioResult
            - value: export interface OperatorVoice
            - value: export interface SpeechTask
            - value: export interface SynthesizeOptions
            - value: export interface SynthesizeResult
