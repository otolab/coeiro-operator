character-defaults.ts:
  analysis:
    meta:
      model: vertexai:gemini-2.5-pro
      sources:
        - path: character-defaults.ts
          hash: e44bd0d40f65bf68b186df5067f9c953dd88932441674fa2b3486319f0ecc477
      version: 0.0.3
    result:
      content: >-
        # Analysis Report for `src/operator/character-defaults.ts`


        This document provides an analysis of the source code file
        `src/operator/character-defaults.ts` based on the provided analysis
        procedure guide.


        ## 1. Dependency details


        No external or internal modules are imported in this file. The code
        consists solely of type definitions and constant exports, with no
        dependencies on other modules.


        **Conclusion:** There are no dependencies.


        ## 2. Dynamic import determined at run-time


        The code was scanned for dynamic imports where the module path is
        determined by a variable at runtime (e.g.,
        `require(\`./modules/\${moduleName}\`)`).


        **Conclusion:** No such dynamic imports were found in this file.


        ## 3. Global variables / constants


        The code was analyzed for the use of non-standard global variables or
        constants. The file only defines and exports its own constants and does
        not reference any external or global variables.


        **Conclusion:** No dependencies on global variables or constants were
        found.


        ## 4. Prototype Pollution


        The code was reviewed for potential prototype pollution. The file
        primarily consists of static object definitions and does not perform any
        operations that modify the prototypes of native objects.


        **Conclusion:** No evidence of prototype pollution was found.


        ## 5. Module interface


        This module exports two constants that define character configurations
        and a mapping from speaker names to IDs.


        **Analysis:**

        The following interfaces are exported from this module:


        -   `export const BUILTIN_CHARACTER_CONFIGS: Record<string,
        CharacterConfig>`: A constant object containing default configurations
        for built-in characters. The `CharacterConfig` interface, while not
        explicitly exported, defines the structure of each configuration object.

        -   `export const SPEAKER_NAME_TO_ID_MAP: Record<string, string>`: A
        constant object that maps character names (in Japanese) to their
        corresponding internal IDs.


        **Details:**


        ```

        details:
          - value: const BUILTIN_CHARACTER_CONFIGS: Record<string, CharacterConfig>
          - value: const SPEAKER_NAME_TO_ID_MAP: Record<string, string>
        ```
      usage: 413
  summary:
    meta:
      model: vertexai:gemini-2.5-pro
      sources:
        - path: character-defaults.ts
          hash: e44bd0d40f65bf68b186df5067f9c953dd88932441674fa2b3486319f0ecc477
      version: 0.0.3
    result:
      results:
        - hasFindings: false
          name: Dependency details
        - hasFindings: false
          name: Dynamic import determined at run-time
        - hasFindings: false
          name: Global variables / constants
        - hasFindings: false
          name: Prototype Pollution
        - hasFindings: true
          name: Module interface
          details:
            - value: "const BUILTIN_CHARACTER_CONFIGS: Record<string, CharacterConfig>"
            - value: "const SPEAKER_NAME_TO_ID_MAP: Record<string, string>"
cli.ts:
  analysis:
    meta:
      model: vertexai:gemini-2.5-pro
      sources:
        - path: cli.ts
          hash: 1abd1ad9991257a22ce1462b7ad835568c4989aa6a353a4331964d1e85f10f9c
      version: 0.0.3
    result:
      content: >-
        # 分析レポート: src/operator/cli.ts


        ## 1. 依存関係の詳細


        このファイルは以下のモジュールに依存しています。


        - `./index.js`:
          - `default` (as `OperatorManager`)

        **根拠:**

        - `partOf: 1` の `import OperatorManager from './index.js';`
        により、`./index.js` モジュールのデフォルトエクスポートに依存していることがわかります。


        ## 2. 実行時に決定される動的インポート


        このファイルには、実行時にパスが決定される動的インポートは含まれていません。


        **根拠:**

        - 提供されたコードチャンク全体を調査した結果、`require()` や `import()`
        の引数が変数やテンプレートリテラルで構成されている箇所は見つかりませんでした。


        ## 3. グローバル変数/定数


        このファイルでは、Node.jsの標準グローバルオブジェクトである `process` (`process.argv`,
        `process.exit`) と `console`
        が利用されています。ガイドラインに基づき、これらは非標準のグローバル変数・定数とは見なされないため、報告対象外です。


        **根拠:**

        - `partOf: 7` で `process.exit(1)` が、`partOf: 13` で `process.argv`
        が使用されています。

        - `console.log` や `console.error` はファイル全体で広く使用されています。

        - これら以外の、未定義のグローバル変数や定数へのアクセスは見つかりませんでした。


        ## 4. プロトタイプ汚染


        ネイティブオブジェクトのプロトタイプを汚染する可能性のあるコードは、ベストエフォートでの解析の結果、検出されませんでした。


        **根拠:**

        - ファイル全体をスキャンした結果、`Object.prototype` や `Array.prototype`
        など、ネイティブオブジェクトのプロトタイプを直接変更するようなコードは見つかりませんでした。


        ## 5. モジュールインターフェース


        このモジュールは、`OperatorManagerCLI` クラスをデフォルトエクスポートしています。


        ```

        details:
          - value: default class OperatorManagerCLI { constructor(); async showUsage(): Promise<void>; async run(args: string[]): Promise<void>; async handleAssign(args: string[]): Promise<void>; async handleRelease(): Promise<void>; async handleStatus(): Promise<void>; async handleAvailable(): Promise<void>; async handleClear(): Promise<void>; }
        ```


        **根拠:**

        - `partOf: 13` の `export default OperatorManagerCLI;`
        により、`OperatorManagerCLI` クラスがデフォルトエクスポートされていることがわかります。

        - `partOf: 3` から `partOf: 12` にかけて定義されている `OperatorManagerCLI`
        クラスには、コンストラクタと複数の公開 `async` メソッドが含まれています。プライベートメソッド (`parseAssignArgs`,
        `executeAssignment`) は外部インターフェースには含まれません。
      usage: 956
  summary:
    meta:
      model: vertexai:gemini-2.5-pro
      sources:
        - path: cli.ts
          hash: 1abd1ad9991257a22ce1462b7ad835568c4989aa6a353a4331964d1e85f10f9c
      version: 0.0.3
    result:
      results:
        - hasFindings: true
          name: 依存関係の詳細
          details:
            - value: ./index.js
              reason: "partOf: 1 の `import OperatorManager from './index.js';`
                により、`./index.js` モジュールのデフォルトエクスポートに依存していることがわかります。"
              subItems:
                - default
        - hasFindings: false
          name: 実行時に決定される動的インポート
        - hasFindings: false
          name: グローバル変数/定数
        - hasFindings: false
          name: プロトタイプ汚染
        - hasFindings: true
          name: モジュールインターフェース
          details:
            - value: "default class OperatorManagerCLI { constructor(); async showUsage():
                Promise<void>; async run(args: string[]): Promise<void>; async
                handleAssign(args: string[]): Promise<void>; async
                handleRelease(): Promise<void>; async handleStatus():
                Promise<void>; async handleAvailable(): Promise<void>; async
                handleClear(): Promise<void>; }"
              reason: "partOf: 13 の `export default OperatorManagerCLI;`
                により、`OperatorManagerCLI` クラスがデフォルトエクスポートされていることがわかります。partOf: 3
                から `partOf: 12` にかけて定義されている `OperatorManagerCLI`
                クラスには、コンストラクタと複数の公開 `async` メソッドが含まれています。プライベートメソッド
                (`parseAssignArgs`, `executeAssignment`) は外部インターフェースには含まれません。"
config-manager.test.ts:
  analysis:
    meta:
      model: vertexai:gemini-2.5-pro
      sources:
        - path: config-manager.test.ts
          hash: 34eb04af0eae6daaf379847c85fcf10e02172ac9a4535e342adf1073d93562b3
      version: 0.0.3
    result:
      content: >-
        # Analysis Report for src/operator/config-manager.test.ts


        This document provides an analysis of the test file
        `src/operator/config-manager.test.ts` based on the [Analysis Procedure
        Guide](analysis-procedure-guide).


        ## 1. Dependency details


        The file has the following dependencies:


        ```yaml

        ./config-manager.js:
          - ConfigManager
        fs/promises:
          - readFile
          - writeFile
          - access
          - mkdir
        path:
          - join
        os:
          - tmpdir
        fs:
          - "*"
        ```


        **Reasoning:**

        - Static imports for `config-manager.js`, `fs/promises`, `path`, and
        `os` are declared at the top of the file.
          ```typescript
          // partOf: 1 of 11
          import { ConfigManager } from './config-manager.js';
          import { readFile, writeFile, access, mkdir } from 'fs/promises';
          import { join } from 'path';
          import { tmpdir } from 'os';
          ```
        - A dynamic import for the `fs` module is used within the `afterEach`
        block, which imports the entire module.
          ```typescript
          // partOf: 3 of 11
          afterEach(async () => {
              // 一時ディレクトリをクリーンアップ
              const fs = await import('fs');
              await fs.promises.rm(tempDir, { recursive: true, force: true });
          });
          ```

        ## 2. Dynamic import determined at run-time


        There are no dynamic imports where the module path is determined by a
        variable at runtime.


        **Reasoning:**

        The file contains a dynamic import `await import('fs')`, but its path is
        a static string literal (`'fs'`), not a variable. Therefore, it does not
        fit the criteria for this section.


        ## 3. Global variables / constants


        The code depends on the following non-standard global
        variables/constants:


        - `fetch`


        **Reasoning:**

        The test code explicitly mocks the `fetch` function by assigning it to
        `global.fetch`. This demonstrates a dependency on a globally available
        `fetch` function, which is manipulated for testing purposes.


        ```typescript

        // partOf: 2 of 11

        // fetchのモック

        global.fetch = jest.fn();


        // partOf: 8 of 11

        (global.fetch as jest.Mock).mockResolvedValueOnce({
            ok: true,
            json: async () => mockResponse
        });

        ```

        *Note: Standard testing globals provided by the Jest framework (e.g.,
        `describe`, `test`, `expect`, `jest`, `beforeEach`, `afterEach`) are
        considered part of the standard execution environment for this test file
        and are not listed.*


        ## 4. Prototype Pollution


        No potential prototype pollution was detected in this file.


        **Reasoning:**

        A review of the code did not reveal any modifications to the prototypes
        of native JavaScript objects (e.g., `Object.prototype`).


        ## 5. Module interface


        This file is a test module and does not export any interfaces.


        **Reasoning:**

        There are no `export` statements in the file. This indicates that it is
        intended for testing purposes only and does not provide any
        functionality to other modules.
      usage: 672
  summary:
    meta:
      model: vertexai:gemini-2.5-pro
      sources:
        - path: config-manager.test.ts
          hash: 34eb04af0eae6daaf379847c85fcf10e02172ac9a4535e342adf1073d93562b3
      version: 0.0.3
    result:
      results:
        - hasFindings: true
          name: Dependency details
          details:
            - value: ./config-manager.js
              subItems:
                - ConfigManager
            - value: fs/promises
              subItems:
                - readFile
                - writeFile
                - access
                - mkdir
            - value: path
              subItems:
                - join
            - value: os
              subItems:
                - tmpdir
            - value: fs
              subItems:
                - "*"
        - hasFindings: false
          name: Dynamic import determined at run-time
          details: []
        - hasFindings: true
          name: Global variables / constants
          details:
            - value: fetch
              reason: The test code explicitly mocks the `fetch` function by assigning it to
                `global.fetch`. This demonstrates a dependency on a globally
                available `fetch` function, which is manipulated for testing
                purposes.
        - hasFindings: false
          name: Prototype Pollution
          details: []
        - hasFindings: false
          name: Module interface
          details: []
config-manager.ts:
  analysis:
    meta:
      model: vertexai:gemini-2.5-pro
      sources:
        - path: config-manager.ts
          hash: fd2208e79c87fdbaea7ba6e1aa6c7f792dffd4003d621406caf6f6d73ef2c6e7
        - path: config-manager.test.ts
          hash: 34eb04af0eae6daaf379847c85fcf10e02172ac9a4535e342adf1073d93562b3
      version: 0.0.3
    result:
      content: |-
        # 分析レポート: `src/operator/config-manager.ts`

        ## 概要

        このファイルは、アプリケーションの設定管理を担当する `ConfigManager` クラスを定義しています。主な機能は以下の通りです。

        -   COEIROINK互換サーバーから動的に音声フォント（キャラクター情報）を取得する。
        -   内蔵のデフォルトキャラクター設定、動的に取得した音声フォント情報、ユーザーによるカスタム設定をマージして、最終的なアプリケーション設定を構築する。
        -   設定の読み込み、書き込み、キャッシュ管理を行う。
        -   設定ファイルはJSON形式で、`operator-config.json`（ユーザー設定）と`coeiroink-config.json`（サーバー接続情報）を扱います。

        ## 1. Dependency details

        このモジュールは、ファイルシステム操作、パス操作、およびアプリケーション内のデフォルト設定モジュールに依存しています。また、設定の書き込み処理において、動的に`fs`モジュールをインポートしています。

        ```yaml
        fs/promises:
          - readFile
          - writeFile
          - access
          - mkdir
        fs:
          - constants
          - '*'
        path:
          - join
        ./character-defaults.js:
          - BUILTIN_CHARACTER_CONFIGS
          - SPEAKER_NAME_TO_ID_MAP
        ```

        **根拠:**

        -   `import { readFile, writeFile, access, mkdir } from 'fs/promises';`
        -   `import { constants } from 'fs';`
        -   `import { join } from 'path';`
        -   `import { BUILTIN_CHARACTER_CONFIGS, SPEAKER_NAME_TO_ID_MAP } from './character-defaults.js';`
        -   `const fs = await import('fs');` (`writeJsonFile` メソッド内)

        ## 2. Dynamic import determined at run-time

        実行時の変数によってインポートパスが決定されるような動的インポートは、このファイル内では検出されませんでした。

        `writeJsonFile`メソッド内で`await import('fs')`という動的インポートが使用されていますが、インポートパスは静的な文字列であり、実行時の変数には依存していません。

        ## 3. Global variables / constants

        標準提供外のグローバル変数として `fetch` が利用されています。

        -   **`fetch`**: COEIROINKサーバーから音声フォント情報を取得するために使用されています。

        **根拠:**

        `fetchAvailableVoices` メソッド内で、`fetch` が直接呼び出されています。これは、Node.js v18以降のグローバル関数、またはブラウザ環境やPolyfillによって提供されることを期待しています。関連テストコード [Related test: config-manager.test.ts](related-file-config-manager.test.ts) でも `global.fetch` がモックされており、グローバルスコープへの依存が明確です。

        ```typescript
        // src/operator/config-manager.ts:L146
        const response = await fetch(`http://${host}:${port}/v1/speakers`);
        ```

        ## 4. Prototype Pollution

        ネイティブオブジェクトのプロトタイプを変更するような、Prototype Pollutionの可能性があるコードは検出されませんでした。`deepMerge` メソッドはオブジェクトを再帰的にマージしますが、新しいオブジェクトを生成して返す実装となっており、既存のオブジェクトのプロトタイプには影響を与えません。

        ## 5. Module interface

        このモジュールは、設定管理を行う `ConfigManager` クラスと、関連するTypeScriptインターフェイスをエクスポートしています。

        ```
        details:
          - value: export interface CharacterStyle { name: string; style_id: number; personality: string; speaking_style: string; disabled?: boolean; }
          - value: export interface CharacterConfig { name: string; personality: string; speaking_style: string; greeting: string; farewell: string; default_style: string; style_selection: string; voice_id: string | null; available_styles: Record<string, CharacterStyle>; disabled?: boolean; }
          - value: export class ConfigManager
          - value: export default ConfigManager
        ```

        **根拠:**

        -   `export interface CharacterStyle { ... }`
        -   `export interface CharacterConfig { ... }`
        -   `export class ConfigManager { ... }`
        -   `export default ConfigManager;`
      usage: 1283
  errors:
    meta:
      model: vertexai:gemini-2.5-pro
      sources:
        - path: config-manager.ts
          hash: fd2208e79c87fdbaea7ba6e1aa6c7f792dffd4003d621406caf6f6d73ef2c6e7
      version: 0.0.0
    result:
      - The 'Dependency details' analysis is incomplete. The code uses
        `fs.promises.rename` via a dynamic import (`await import('fs')`), but
        `rename` is not listed as a dependency.
      - The 'Module interface' analysis is incomplete. It lists `export class
        ConfigManager` but fails to detail its public methods (e.g.,
        `buildDynamicConfig`, `getCharacterConfig`), which are part of the
        module's public API.
  summary:
    meta:
      model: vertexai:gemini-2.5-pro
      sources:
        - path: config-manager.ts
          hash: fd2208e79c87fdbaea7ba6e1aa6c7f792dffd4003d621406caf6f6d73ef2c6e7
        - path: config-manager.test.ts
          hash: 34eb04af0eae6daaf379847c85fcf10e02172ac9a4535e342adf1073d93562b3
      version: 0.0.3
    result:
      results:
        - hasFindings: true
          name: Dependency details
          details:
            - value: fs/promises
              subItems:
                - readFile
                - writeFile
                - access
                - mkdir
            - value: fs
              subItems:
                - constants
                - "*"
            - value: path
              subItems:
                - join
            - value: ./character-defaults.js
              subItems:
                - BUILTIN_CHARACTER_CONFIGS
                - SPEAKER_NAME_TO_ID_MAP
        - hasFindings: false
          name: Dynamic import determined at run-time
        - hasFindings: true
          name: Global variables / constants
          details:
            - value: fetch
              reason: "COEIROINKサーバーから音声フォント情報を取得するために使用されています。関連テストコード [Related test:
                config-manager.test.ts](related-file-config-manager.test.ts) でも
                `global.fetch` がモックされており、グローバルスコープへの依存が明確です。"
        - hasFindings: false
          name: Prototype Pollution
        - hasFindings: true
          name: Module interface
          details:
            - value: "export interface CharacterStyle { name: string; style_id: number;
                personality: string; speaking_style: string; disabled?: boolean;
                }"
            - value: "export interface CharacterConfig { name: string; personality: string;
                speaking_style: string; greeting: string; farewell: string;
                default_style: string; style_selection: string; voice_id: string
                | null; available_styles: Record<string, CharacterStyle>;
                disabled?: boolean; }"
            - value: export class ConfigManager
            - value: export default ConfigManager
index.ts:
  analysis:
    meta:
      model: vertexai:gemini-2.5-pro
      sources:
        - path: index.ts
          hash: 9a3540c8104c6e2b7720f320fe0f70fc4d907e34c4715c4d310f54be2f31d88a
      version: 0.0.3
    result:
      content: |-
        # Analysis Report for `src/operator/index.ts`

        このファイルは、オペレーター管理システムを実装したNode.jsスクリプトです。`OperatorManager`クラスを定義し、キャラクターとスタイルの管理、セッションごとのオペレーターの割り当て、解放、状態確認などの機能を提供します。設定ファイルやセッション情報は、ユーザーのホームディレクトリ等にJSONファイルとして永続化されます。

        ---

        ## 1. Dependency details

        このファイルは、Node.jsの標準モジュール、および同一ディレクトリ内の `config-manager.js` に依存しています。

        **根拠:**
        ファイルの先頭にある `import` 文、およびクラスメソッド内で使用されている動的な `import()` 構文から依存関係を抽出しました。

        ```yaml
        fs/promises:
          - readFile
          - writeFile
          - access
          - mkdir
          - unlink
        fs:
          - constants
          - '*' # writeJsonFileメソッド内での動的インポート
        child_process:
          - spawn
          - '*' # clearAllOperatorsメソッド内での動的インポート
        path:
          - join
        ./config-manager.js:
          - '*' # default export (ConfigManager)
          - CharacterConfig
          - CharacterStyle
        ```

        ---

        ## 2. Dynamic import determined at run-time

        実行時の変数によってインポートするモジュールが決定されるような動的インポートは、このファイルには含まれていません。

        **根拠:**
        ファイル内で `import()` 構文が使用されていますが、インポートパスは静的な文字列リテラルです。

        ```typescript
        // in writeJsonFile method
        const fs = await import('fs');

        // in clearAllOperators method
        const { exec } = await import('child_process');
        ```

        これらのインポートパスは変数を含んでおらず、実行時に解決される依存関係ではありません。

        ---

        ## 3. Global variables / constants

        このファイルは、Node.jsの標準グローバルオブジェクトである `process` に依存しています。

        **根拠:**
        以下の関数で `process` オブジェクトのプロパティが参照されています。

        -   `getConfigDir()`: `process.env.HOME`, `process.env.USERPROFILE`, `process.cwd()`
        -   `getSessionId()`: `process.env.ITERM_SESSION_ID`, `process.env.TERM_SESSION_ID`, `process.ppid`

        ```
        * process (env, cwd, ppid プロパティへのアクセス)
        ```

        ---

        ## 4. Prototype Pollution

        ベストエフォートでの解析の結果、ネイティブオブジェクトのプロトタイプを変更するような、Prototype Pollutionの可能性のあるコードは検出されませんでした。

        ---

        ## 5. Module interface

        このモジュールは `OperatorManager` クラスをエクスポートしています。このクラスがモジュールの主たるインターフェースとなります。

        **根拠:**
        ファイル末尾の `export` 文に基づきます。

        ```typescript
        export class OperatorManager {
            // ... private properties and constructor
            
            async initialize(): Promise<void> { /* ... */ }
            async readJsonFile<T>(filePath: string, defaultValue: T): Promise<T> { /* ... */ }
            async writeJsonFile(filePath: string, data: any): Promise<void> { /* ... */ }
            async initActiveOperators(): Promise<void> { /* ... */ }
            async getCharacterInfo(characterId: string): Promise<Character> { /* ... */ }
            selectStyle(character: Character, specifiedStyle: string | null): Style { /* ... */ }
            async extractGreetingPatterns(): Promise<any> { /* ... */ }
            async getAvailableOperators(): Promise<string[]> { /* ... */ }
            async reserveOperator(operatorId: string): Promise<boolean> { /* ... */ }
            async releaseOperator(): Promise<ReleaseResult> { /* ... */ }
            async clearAllOperators(): Promise<boolean> { /* ... */ }
            async assignRandomOperator(style: string | null): Promise<AssignResult> { /* ... */ }
            async assignSpecificOperator(specifiedOperator: string, style: string | null): Promise<AssignResult> { /* ... */ }
            async updateVoiceSetting(voiceId: string | null, styleId: number): Promise<void> { /* ... */ }
            async showCurrentOperator(): Promise<StatusResult> { /* ... */ }
        }

        export default OperatorManager;
        ```

        **エクスポートされるインターフェース:**

        ```
        details:
          - value: export class OperatorManager { constructor(); async initialize(): Promise<void>; async readJsonFile<T>(...): Promise<T>; async writeJsonFile(...): Promise<void>; async initActiveOperators(): Promise<void>; async getCharacterInfo(...): Promise<Character>; selectStyle(...): Style; async extractGreetingPatterns(): Promise<any>; async getAvailableOperators(): Promise<string[]>; async reserveOperator(...): Promise<boolean>; async releaseOperator(): Promise<ReleaseResult>; async clearAllOperators(): Promise<boolean>; async assignRandomOperator(...): Promise<AssignResult>; async assignSpecificOperator(...): Promise<AssignResult>; async updateVoiceSetting(...): Promise<void>; async showCurrentOperator(): Promise<StatusResult>; }
          - value: export default OperatorManager
        ```
      usage: 1386
  errors:
    meta:
      model: vertexai:gemini-2.5-pro
      sources:
        - path: index.ts
          hash: 9a3540c8104c6e2b7720f320fe0f70fc4d907e34c4715c4d310f54be2f31d88a
      version: 0.0.0
    result:
      - "Dependency details:
        `child_process`の依存関係として`*`が報告されていますが、コード内で動的にインポートされているのは`exec`のみであり、`*`
        (すべて)ではありません。"
      - "Global variables / constants:
        Node.jsの標準グローバル変数である`process`が報告されています。解析ガイドラインでは、実行環境が提供する標準のグローバル変数は報\
        告対象外とされているため、この報告は不要です。"
  summary:
    meta:
      model: vertexai:gemini-2.5-pro
      sources:
        - path: index.ts
          hash: 9a3540c8104c6e2b7720f320fe0f70fc4d907e34c4715c4d310f54be2f31d88a
      version: 0.0.3
    result:
      results:
        - hasFindings: true
          name: Dependency details
          details:
            - value: fs/promises
              subItems:
                - readFile
                - writeFile
                - access
                - mkdir
                - unlink
            - value: fs
              subItems:
                - constants
                - "*"
            - value: child_process
              subItems:
                - spawn
                - "*"
            - value: path
              subItems:
                - join
            - value: ./config-manager.js
              subItems:
                - "*"
                - CharacterConfig
                - CharacterStyle
        - hasFindings: false
          name: Dynamic import determined at run-time
          details: []
        - hasFindings: true
          name: Global variables / constants
          details:
            - value: "* process"
              reason: env, cwd, ppid プロパティへのアクセス
        - hasFindings: false
          name: Prototype Pollution
          details: []
        - hasFindings: true
          name: Module interface
          details:
            - value: "export class OperatorManager { constructor(); async initialize():
                Promise<void>; async readJsonFile<T>(...): Promise<T>; async
                writeJsonFile(...): Promise<void>; async initActiveOperators():
                Promise<void>; async getCharacterInfo(...): Promise<Character>;
                selectStyle(...): Style; async extractGreetingPatterns():
                Promise<any>; async getAvailableOperators(): Promise<string[]>;
                async reserveOperator(...): Promise<boolean>; async
                releaseOperator(): Promise<ReleaseResult>; async
                clearAllOperators(): Promise<boolean>; async
                assignRandomOperator(...): Promise<AssignResult>; async
                assignSpecificOperator(...): Promise<AssignResult>; async
                updateVoiceSetting(...): Promise<void>; async
                showCurrentOperator(): Promise<StatusResult>; }"
            - value: export default OperatorManager
