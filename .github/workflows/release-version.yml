name: Auto Version on Release Branch

on:
  push:
    branches:
      - 'release/*'

permissions:
  contents: write
  pull-requests: write

jobs:
  version:
    name: Apply Changeset Version
    runs-on: ubuntu-latest
    # Êó¢„Å´Version Packages„Ç≥„Éü„ÉÉ„Éà„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„Éó
    if: "!contains(github.event.head_commit.message, 'Version Packages')"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for changesets
        id: changesets
        run: |
          if npx changeset status --output status.json 2>/dev/null; then
            # Check if there are any changesets (not if releases is empty)
            if [ -f status.json ] && grep -q '"changesets":\[\]' status.json; then
              echo "has_changesets=false" >> $GITHUB_OUTPUT
            else
              echo "has_changesets=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "has_changesets=false" >> $GITHUB_OUTPUT
          fi

      - name: Apply version updates
        if: steps.changesets.outputs.has_changesets == 'true'
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          # Apply changeset version
          npx changeset version

          # Commit if there are changes
          if [ -n "$(git status --porcelain)" ]; then
            git add -A
            git commit -m "Version Packages"
            git push
          fi

      - name: Create or update PR
        if: steps.changesets.outputs.has_changesets == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract version from package.json
          VERSION=$(node -p "require('./package.json').version")
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"

          # Check if PR already exists
          PR_NUMBER=$(gh pr list --head "$BRANCH_NAME" --json number -q '.[0].number')

          if [ -z "$PR_NUMBER" ]; then
            # Get package status
            PACKAGE_STATUS=$(npx changeset status --output /dev/stdout | grep -A 100 'packages to be bumped' || echo 'See changeset status for details')

            # Create new PR
            gh pr create \
              --base main \
              --head "$BRANCH_NAME" \
              --title "Release v$VERSION" \
              --body "## üöÄ Release v$VERSION

          This PR will automatically publish packages to npm when merged.

          ### Packages to be released:
          $PACKAGE_STATUS

          ---
          ‚ö†Ô∏è **Merging this PR will automatically publish to npm**"
          else
            echo "PR #$PR_NUMBER already exists"
          fi
